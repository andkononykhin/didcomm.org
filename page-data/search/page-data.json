{"componentChunkName":"component---src-templates-search-search-tsx","path":"/search/","result":{"pageContext":{"allProtocols":[{"slug":"a/1.0/","title":"A","tags":["star-wars","tag4","tag5"],"license":"MIT","publisher":"Merciful12","avatar":"https://avatars.githubusercontent.com/u/29834619?v=4&s=48","version":"1.0","status":"Demonstrated","summary":"My A protocol summary","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/a/1.0","html":"Roles\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., “You can only issue a credential if you have a DID on the public ledger”). The issue of qualification for roles can also be explored (e.g., “The holder of the credential must be known to the issuer”).\n\nThe formal names for each role are important because they are used when agents discover one another’s capabilities. An agent doesn’t just claim that it supports a protocol; it makes a claim about which roles in the protocol it supports. An agent that supports credential issuance and an agent that supports credential holding may have very different features, but they both use the credential-issuance protocol. By convention, role names use lower-kebab-case and are compared case-sensitively.\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nCode\ncd ~/bin\ncurl -L https://github.com/trentm/json/raw/master/lib/json.js > json\nchmod 755 json\nYou should now have \"json\" on your PATH:\n\n$ json --version\njson 9.0.0\n\nHtml\nTitle"},{"slug":"light-speed-protocol/0.9/","title":"Light Speed Protocol","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"Merciful12","avatar":"https://avatars.githubusercontent.com/u/29834619?v=4&s=48","version":"0.9","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Mon Sep 13 2021 09:48:29 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/light-speed-protocol/0.9","html":"Roles\n\nSee this note for definitions of the terms \"role\", \"participant\", and \"party\".\n\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., \"You can only issue a credential if you have a DID on the public ledger\"). The issue of qualification for roles can also be explored (e.g., \"The holder of the credential must be known to the issuer\").\nThe formal names for each role are important because they are used when agents discover one another's capabilities. An agent doesn't just claim that it supports a protocol; it makes a claim about which roles in the protocol it supports. An agent that supports credential issuance and an agent that supports credential holding may have very different features, but they both use the credential-issuance protocol. By convention, role names use lower-kebab-case and are compared case-sensitively.\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nStates\nThis section lists the possible states that exist for each role. It also enumerates the events (often but not always messages) that can occur, including errors, and what should happen to state as a result. A formal representation of this information is provided in a state machine matrix. It lists events as columns, and states as rows; a cell answers the question, \"If I am in state X (=row), and event Y (=column) occurs, what happens to my state?\" The Tic Tac Toe example is typical.\nChoreography Diagrams from BPMN are good artifacts here, as are PUML sequence diagrams and UML-style state machine diagrams. The matrix form is nice because it forces an exhaustive analysis of every possible event. The diagram styles are often simpler to create and consume, and the PUML and BPMN forms have the virtue that they can support line-by-line diffs when checked in with source code. However, they don't offer an easy way to see if all possible flows have been considered; what they may NOT describe isn't obvious. This--and the freedom from fancy tools--is why the matrix form is used in many early RFCs. We leave it up to the community to settle on whether it wants to strongly recommend specific diagram types.\nThe formal names for each state are important, as they are used in ack s and problem-report s). For example, a problem-report message declares which state the sender arrived at because of the problem. This helps other participants to react to errors with confidence. Formal state names are also used in the agent test suite, in log messages, and so forth.\nBy convention, state names use lower-kebab-case. They are compared case-sensitively.\nState management in protocols is a deep topic. For more information, please see State Details and State Machines.\nBasic Walkthrough\nExplain what happens from beginning to end. in a simple instance of the protocol. The goal is not to describe all the possibilities, but to show a typical (\"happy-path\") case so people get the main idea. Provide examples of the messages and explain their fundamental meaning and usage. All possible fields may not appear; an exhaustive catalog is saved for Message Reference.\nDesign By Contract\nWhat preconditions must be met? What invariants apply? What postconditions are guaranteed under which circumstances? What side effects can occur? What can go wrong, when -- and how do errors affect the state of each party? Consider timeouts, malformed messages, mis-sequenced messages, etc. See Design By Contract.\n\nError Code\nNotes\n\nout-of-memory\nPossible in state waiting-for-commit when RAM is tight. Causes protocol to be abandoned by all parties.\n\nSecurity\nWhat abuse could occur with malicious participants, eavesdroppers, denial-of-service, etc? What should be true about the message trust contexts? What should be repudiable or non-repudiable? What mechanisms does the protocol offer to cope with such issues?\nComposition\n\nSupported Goal Code\nNotes\n\naries.pay.cash\nA goal code used by the Hyperledger Aries ecosystem. See RFC X.\n\ndif.pay-direct\nApproximately the same meaning in DIF ecosystems.\n\nCan this protocol be used as a co-protocol? If yes, please include a coprotocol definition like the one shown here.\nMessage Reference\nUnless the \"Messages\" section under \"Basic Walkthrough\" covered everything that needs to be known about all message fields, this is where the data type, validation rules, and semantics of each field in each message type are detailed. Enumerating possible values, or providing ABNF or regexes is encouraged. Following conventions such as those for date- and time-related fields can save a lot of time here.\nEach message type should be associated with one or more roles in the protocol. That is, it should be clear which roles can send and receive which message types.\nAdvanced Walkthroughs\nThis section is optional. It can be used to show alternate flows through\nthe protocol.\nCollateral\nThis section is optional. It could be used to reference files, code,\nrelevant standards, oracles, test suites, or other artifacts that would\nbe useful to an implementer. In general, collateral should be checked in\nwith the RFC.\nL10n\nIf communication in the protocol involves humans, then localization of\nmessage content may be relevant. Default settings for localization of\nall messages in the protocol can be specified in an l10n.json file\ndescribed here and checked in with the RFC. See\"Decorators at Message\nType Scope\"\nin the Localization RFC.\nImplementations\nEndnotes\n1\nCite someone.\n2\nAdd an explanatory comment that wasn't worth including inline."},{"slug":"my-test-protocol/0.1/","title":"My Test Protocol","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"annaShatkovskaya","avatar":"https://avatars.githubusercontent.com/u/89047134?v=4&s=48","version":"0.1","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Thu Sep 16 2021 14:40:34 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/my-test-protocol/0.1","html":"Roles\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., \"You can only issue a credential if you have a DID on the public ledger\"). The issue of qualification for roles can also be explored (e.g., \"The holder of the credential must be known to the issuer\").\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc."},{"slug":"mytestprotocol/0.2/","title":"My test protocol","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"Mercilful12","avatar":"","version":"0.2","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Fri Sep 17 2021 12:10:17 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/my-test-protocol/0.2","html":"Test attributes\nGetting started with Markdown\nTitles\nTitle 1\nTitle 2\nTitle 1\n========================\nTitle 2\n------------------------\n\nTitle 1\nTitle 2\nTitle 3\nTitle 4\nTitle 5\nTitle 6\n# Title 1\n## Title 2\n### Title 3\n#### Title 4\n##### Title 5\n###### Title 6\n\nParagraph\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit. Phasellus eleifend egestas diam, id tincidunt arcu dictum quis. Pellentesque eu dui tempus, tempus massa sed, eleifend tortor. Donec in sem in erat iaculis tincidunt. Fusce condimentum hendrerit turpis nec vehicula. Aliquam finibus nisi vel eros lobortis dictum. Etiam congue tortor libero, quis faucibus ligula gravida a. Suspendisse non pulvinar nisl. Sed malesuada, felis vitae consequat gravida, dui ligula suscipit ligula, nec elementum nulla sem vel dolor. Vivamus augue elit, venenatis non lorem in, volutpat placerat turpis. Nullam et libero at eros vulputate auctor. Duis sed pharetra lacus. Sed egestas ligula vitae libero aliquet, ac imperdiet est ullamcorper. Sed dapibus sem tempus eros dignissim, ac suscipit lectus dapibus. Proin sagittis diam vel urna volutpat, vel ullamcorper urna lobortis. Suspendisse potenti.\nNulla varius risus sapien, nec fringilla massa facilisis sed. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nunc vel ornare erat, eget rhoncus lectus. Suspendisse interdum scelerisque molestie. Aliquam convallis consectetur lorem ut consectetur. Nullam massa libero, cursus et porta ac, consequat eget nibh. Sed faucibus nisl augue, non viverra justo sagittis venenatis.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit.\n\nPhasellus eleifend egestas diam, id tincidunt arcu dictum quis.\n\nList\n\nItem 1;\n\nItem 1.1;\n\nItem 2;\n\nItem 2.1;\nItem 2.2;\n\nItem 3\n\nItem 3.1;\n\nItem 3.1.1;\n\n* Item 1;\n      * Item 1.1;\n    * Item 2;\n     * Item 2.1;\n     * Item 2.2;\n    * Item 3\n\t   * Item 3.1;\n\t\t  * Item 3.1.1;\n\nList CheckBox\n\nItem A\nItem B\nItem C\n\n- [ ] Item A\n- [x] Item B\n- [x] Item C\n\nLink\nGoogle - Google | Youtube | Gmail | Maps | PlayStore | GoogleDrive\nYoutube - Enjoy videos and music you love, upload original content, and share it with friends, family, and the world on YouTube.\nGitHub - Project\n[Google](https://www.google.com) - _Google | Youtube | Gmail | Maps | PlayStore | GoogleDrive_\n\nAnchor links\nMarkdown - Summary\nMarkdown - Markdown Editor\n[Markdown - Link](#Link)\n\nBlockquote\n\nLebenslangerschicksalsschatz: Lifelong Treasure of Destiny\n\nLebenslangerschicksalsschatz: Lifelong Treasure of Destiny\n\nImage | GIF\n\n![myImage](https://media.giphy.com/media/XRB1uf2F9bGOA/giphy.gif)\n\nSee more Markdown Extras - Image Align\nStyle Text\nItalic\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit.\n*Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit.*\n\nBold\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit.\n**Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum, nibh eu commodo posuere, ligula ante dictum neque, vitae pharetra mauris mi a velit.**\n\nStrikethrough\nstrikethrough text\n~~strikethrough text~~\n\nCode\npublic static void main(String[] args) {\n\t//TODO\n}\n\n```java\npublic static void main(String[] args) {\n//TODO\n}\n```\n\nSee more Markdown Extras - Style Text\nEmail\nemail@email.com\n\nTable\n\nColumn 1\nColumn 2\nColumn 3\n\nRow 1 Column1\nRow 1 Column 2\nRow 1 Column 3\n\nRow 2 Column1\nRow 2 Column 2\nRow 2 Column 3\n\n|Column 1|Column 2|Column 3| |---|---|---| |Row 1 Column1| Row 1 Column 2| Row 1 Column 3| |Row 2 Column1| Row 2 Column 2| Row 2 Column 3|\n\nTable Align\nAlign Center\n\nColumn 1\nColumn 2\nColumn 3\n\nRow 1 Column1\nRow 1 Column 2\nRow 1 Column 3\n\nRow 2 Column1\nRow 2 Column 2\nRow 2 Column 3\n\n|Column 1|Column 2|Column 3| |:---:|:---:|:---:| |Row 1 Column1| Row 1 Column 2| Row 1 Column 3| |Row 2 Column1| Row 2 Column 2| Row 2 Column 3|\n\nAlign Left\n\nColumn 1\nColumn 2\nColumn 3\n\nRow 1 Column1\nRow 1 Column 2\nRow 1 Column 3\n\nRow 2 Column1\nRow 2 Column 2\nRow 2 Column 3\n\n|Column 1|Column 2|Column 3| |:---|:---|:---| |Row 1 Column1| Row 1 Column 2| Row 1 Column 3| |Row 2 Column1| Row 2 Column 2| Row 2 Column 3|\n\nAlign Right\n\nColumn 1\nColumn 2\nColumn 3\n\nRow 1 Column1\nRow 1 Column 2\nRow 1 Column 3\n\nRow 2 Column1\nRow 2 Column 2\nRow 2 Column 3\n\n|Column 1|Column 2|Column 3| |---:|---:|---:| |Row 1 Column1| Row 1 Column 2| Row 1 Column 3| |Row 2 Column1| Row 2 Column 2| Row 2 Column 3|\n\nSee more Markdown Extras - Table\n\nRownspan\nColspan\n\nEscape Characters\n\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark\n\nemoji\n\nEmoji;\n\nPeople - (;;);\nNature - (;;);\nObjects - (;;);\nPlaces - (;;);\nSymbols - (;;);\n\nKaomoji;\nSpecial-Symbols;\n\nShields Badges\nWe are not responsible for this site\nSee more: https://shields.io/\n\nMarkdown Editor\nStackEdit - StackEdit’s Markdown syntax highlighting is unique. The refined text formatting of the editor helps you visualize the final rendering of your files.\nSome links for more in depth learning\nMarkdown Extras\nWikipedia - Markdown\nOficial"},{"slug":"not-cool/1.1/","title":"Not cool","tags":["star-war","tag4","tag5"],"license":"FreeBSD","publisher":"Merciful12","avatar":"https://avatars.githubusercontent.com/u/29834619?v=4&s=48","version":"1.1","status":"Proposed","summary":"Instructions of publishing a new not cool protocol","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/not-cool/1.1","html":"Roles\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., “You can only issue a credential if you have a DID on the public ledger”). The issue of qualification for roles can also be explored (e.g., “The holder of the credential must be known to the issuer”).\nThe formal names for each role are important because they are used when agents discover one another’s capabilities. An agent doesn’t just claim that it supports a protocol; it makes a claim about which roles in the protocol it supports. An agent that supports credential issuance and an agent that supports credential holding may have very different features, but they both use the credential-issuance protocol. By convention, role names use lower-kebab-case and are compared case-sensitively.\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nCode\ncd ~/bin\ncurl -L https://github.com/trentm/json/raw/master/lib/json.js > json\nchmod 755 json\nYou should now have \"json\" on your PATH:\n\n$ json --version\njson 9.0.0\n\nHtml\nTitle"},{"slug":"test-images-protocol/0.1/","title":"Test images protocol","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"Merciful12","avatar":"https://avatars.githubusercontent.com/u/29834619?v=4&s=48","version":"0.1","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/test-images-protocol/0.1","html":"Authors\n\nyour name -- email is optional\n\nRoles\n\nSee\n\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., \"You can only issue a credential if you have a DID on the public ledger\"). The issue of qualification for roles can also be explored (e.g., \"The holder of the credential must be known to the issuer\").\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nStates\nThis section lists the possible states that exist for each role. It also enumerates the events (often but not always messages) that can occur, including errors, and what should happen to state as a result. A formal representation of this information is provided in a state machine matrix. It lists events as columns, and states as rows; a cell answers\nChoreography Diagrams from BPMN are good artifacts here, as are PUML sequence diagrams and UML-style state machine diagrams. The matrix form is nice because it forces an exhaustive analysis of every possible event. The diagram styles are often simpler to create and consume, and the PUML and BPMN forms have the virtue that they can support line-by-line diffs when checked in with source code. However, they don't offer an easy way to see if all possible flows have been considered; what they may NOT describe isn't obvious. This--and the freedom from fancy tools--is why the matrix form is used in many early RFCs. We leave it up to the community to settle on whether it wants to strongly recommend specific diagram types.\nBy convention, state names use lower-kebab-case. They are compared case-sensitively.\nBasic Walkthrough\nExplain what happens from beginning to end. in a simple instance of the protocol. The goal is not to describe all the possibilities, but to show a typical (\"happy-path\") case so people get the main idea. Provide examples of the messages and explain their fundamental meaning and usage. All possible fields may not appear; an exhaustive catalog is saved for Message Reference.\nDesign By Contract\nWhat preconditions must be met? What invariants apply? What postconditions are guaranteed under which circumstances? What side effects can occur? What can go wrong, when -- and how do errors affect the state of each party? Consider timeouts, malformed messages, mis-sequenced messages, etc. See Design By Contract.\n\nError Code\nNotes\n\nout-of-memory\nPossible in state waiting-for-commit when RAM is tight. Causes protocol to be abandoned by all parties.\n\nSecurity\nWhat abuse could occur with malicious participants, eavesdroppers, denial-of-service, etc? What should be true about the [message trust contexts\nComposition\n\nSupported Goal Code\nNotes\n\naries.pay.cash\nA goal code used by the Hyperledger Aries ecosystem. See RFC X.\n\ndif.pay-direct\nApproximately the same meaning in DIF ecosystems.\n\nMessage Reference\nUnless the \"Messages\" section under \"Basic Walkthrough\" covered everything that needs to be known about all message fields, this is where the data type, validation rules, and semantics of each field in each message type are detailed. Enumerating possible values, or providing ABNF or regexes is encouraged.\nEach message type should be associated with one or more roles in the protocol. That is, it should be clear which roles can send and receive which message types.\nAdvanced Walkthroughs\nThis section is optional. It can be used to show alternate flows through\nthe protocol.\nCollateral\nThis section is optional. It could be used to reference files, code,\nrelevant standards, oracles, test suites, or other artifacts that would\nbe useful to an implementer. In general, collateral should be checked in\nwith the RFC.\nL10n\nIf communication in the protocol involves humans, then localization of\nmessage content may be relevant. Default settings for localization of\nall messages in the protocol can be specified in an l10n.json file\ndescribed here and checked in with the RFC.\nImplementations\n\nPDF Version\nEndnotes\n1\nCite someone.\n2\nAdd an explanatory comment that wasn't worth including inline."},{"slug":"test-images-protocol/0.2/","title":"Test images protocol","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"Mercilful12","avatar":"","version":"0.2","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/test-images-protocol/0.2","html":"Authors\n\nyour name -- email is optional\n\nRoles\n\nSee\n\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., \"You can only issue a credential if you have a DID on the public ledger\"). The issue of qualification for roles can also be explored (e.g., \"The holder of the credential must be known to the issuer\").\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nStates\nThis section lists the possible states that exist for each role. It also enumerates the events (often but not always messages) that can occur, including errors, and what should happen to state as a result. A formal representation of this information is provided in a state machine matrix. It lists events as columns, and states as rows; a cell answers\nChoreography Diagrams from BPMN are good artifacts here, as are PUML sequence diagrams and UML-style state machine diagrams. The matrix form is nice because it forces an exhaustive analysis of every possible event. The diagram styles are often simpler to create and consume, and the PUML and BPMN forms have the virtue that they can support line-by-line diffs when checked in with source code. However, they don't offer an easy way to see if all possible flows have been considered; what they may NOT describe isn't obvious. This--and the freedom from fancy tools--is why the matrix form is used in many early RFCs. We leave it up to the community to settle on whether it wants to strongly recommend specific diagram types.\nBy convention, state names use lower-kebab-case. They are compared case-sensitively.\nBasic Walkthrough\nExplain what happens from beginning to end. in a simple instance of the protocol. The goal is not to describe all the possibilities, but to show a typical (\"happy-path\") case so people get the main idea. Provide examples of the messages and explain their fundamental meaning and usage. All possible fields may not appear; an exhaustive catalog is saved for Message Reference.\nDesign By Contract\nWhat preconditions must be met? What invariants apply? What postconditions are guaranteed under which circumstances? What side effects can occur? What can go wrong, when -- and how do errors affect the state of each party? Consider timeouts, malformed messages, mis-sequenced messages, etc. See Design By Contract.\n\nError Code\nNotes\n\nout-of-memory\nPossible in state waiting-for-commit when RAM is tight. Causes protocol to be abandoned by all parties.\n\nSecurity\nWhat abuse could occur with malicious participants, eavesdroppers, denial-of-service, etc? What should be true about the [message trust contexts\nComposition\n\nSupported Goal Code\nNotes\n\naries.pay.cash\nA goal code used by the Hyperledger Aries ecosystem. See RFC X.\n\ndif.pay-direct\nApproximately the same meaning in DIF ecosystems.\n\nMessage Reference\nUnless the \"Messages\" section under \"Basic Walkthrough\" covered everything that needs to be known about all message fields, this is where the data type, validation rules, and semantics of each field in each message type are detailed. Enumerating possible values, or providing ABNF or regexes is encouraged.\nEach message type should be associated with one or more roles in the protocol. That is, it should be clear which roles can send and receive which message types.\nAdvanced Walkthroughs\nThis section is optional. It can be used to show alternate flows through\nthe protocol.\nCollateral\nThis section is optional. It could be used to reference files, code,\nrelevant standards, oracles, test suites, or other artifacts that would\nbe useful to an implementer. In general, collateral should be checked in\nwith the RFC.\nL10n\nIf communication in the protocol involves humans, then localization of\nmessage content may be relevant. Default settings for localization of\nall messages in the protocol can be specified in an l10n.json file\ndescribed here and checked in with the RFC.\nImplementations\n\nUntitled-Diagram.pdf\nEndnotes\n1\nCite someone.\n2\nAdd an explanatory comment that wasn't worth including inline."},{"slug":"test-layout/0.1/","title":"Test layout","tags":["star-wars","tag4","tag5","tag6","tag7","loooooooooooooooooooooooooooooooooongtag","taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag8","tag9","tag10","tatatatatattaattaatag"],"license":"MITLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong protocol protocol protocol","publisher":"annaShatkovskaya","avatar":"https://avatars.githubusercontent.com/u/89047134?v=4&s=48","version":"0.1","status":"Proposed","summary":"My test-layout protocol loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong summary","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/test-layout/0.1","html":"Roles\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., “You can only issue a credential if you have a DID on the public ledger”). The issue of qualification for roles can also be explored (e.g., “The holder of the credential must be known to the issuer”).\nThe formal names for each role are important because they are used when agents discover one another’s capabilities. An agent doesn’t just claim that it supports a protocol; it makes a claim about which roles in the protocol it supports. An agent that supports credential issuance and an agent that supports credential holding may have very different features, but they both use the credential-issuance protocol. By convention, role names use lower-kebab-case and are compared case-sensitively.\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nCode\ncd ~/bin\ncurl -L https://github.com/trentmlooooooooooooooooooooooooooongcheeeeeeeeeeeeeeeeeeeeeeceeeeeeeeeeeeeeeeeeeeeeeeeeek/json/raw/master/lib/json.js > json\nchmod 755 json\nYou should now have \"json\" on your PATH:\n\n$ json --version\njson 9.0.0\n\nHtml\n\nMy First Headingggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\n\nMy first paragraph.\n\nMy First Heading\n\nMy first paragraph.\n\nMy First Heading\n\nMy first paragraph."},{"slug":"test-layout/1.0/","title":"Test layout","tags":["star-wars","tag4","tag5","tag6","tag7","tag9","taaaaaaaaaaaaaaag4","taaaaaaaaaaaaaaaaaag5","taaaaaaaaaaaaaaaaaaaaaag6","taaaaaaaaaaaaaaaaaaaaaaaaag7","taaaaaaaaaaaaaaaaaaaaaaaaaaaaag9"],"license":"MITLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong protocol protocol protocol","publisher":"annaShatkovskaya","avatar":"https://avatars.githubusercontent.com/u/89047134?v=4&s=48","version":"1.0","status":"Production","summary":"My test-layout protocol loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong summary","modifiedDate":"Thu Sep 16 2021 11:28:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/test-layout/1.0","html":"Roles\nProvides a formal name (using backticks in markdown) for each role in the protocol, says who and how many can play each role, and describes constraints associated with those roles (e.g., “You can only issue a credential if you have a DID on the public ledger”). The issue of qualification for roles can also be explored (e.g., “The holder of the credential must be known to the issuer”).\nThe formal names for each role are important because they are used when agents discover one another’s capabilities. An agent doesn’t just claim that it supports a protocol; it makes a claim about which roles in the protocol it supports. An agent that supports credential issuance and an agent that supports credential holding may have very different features, but they both use the credential-issuance protocol. By convention, role names use lower-kebab-case and are compared case-sensitively.\nConnectivity\nDescribe any assumptions about simplex vs. duplex, which parties need to talk to which parties, etc.\nCode\ncd ~/bin\ncurl -L https://github.com/trentmlooooooooooooooooooooooooooongcheeeeeeeeeeeeeeeeeeeeeeceeeeeeeeeeeeeeeeeeeeeeeeeeek/json/raw/master/lib/json.js > json\nchmod 755 json\nYou should now have \"json\" on your PATH:\n\n$ json --version\njson 9.0.0\n\nHtml\n\nMy first paragraph.\n\nMy First Heading\n\nMy first paragraph.\n\nMy First Heading\n\nMy first paragraph."},{"slug":"testtag/0.1/","title":"test tag","tags":["faster-than-light-travel","star-wars"],"license":"MIT","publisher":"annaShatkovskaya","avatar":"https://avatars.githubusercontent.com/u/89047134?v=4&s=48","version":"0.1","status":"Production","summary":"In one or two sentences, explain what problem this protocol solve, how it works, and other key characteristics.","modifiedDate":"Thu Sep 23 2021 20:45:42 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/testtag/0.1","html":"Tag TEXTAREA\n\nTest tags:\n\nhtmlbook.ru - Page title\n\n...\n\nTag А, attribute title\n\nTag А, attribute name\n\n`there is content.\nup\n\nThe canvas height and width attributes"}],"allLicenses":["MIT","FreeBSD","MITLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong protocol protocol protocol"]}},"staticQueryHashes":["3000541721","3766577012"]}